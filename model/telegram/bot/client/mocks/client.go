// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "gitlab.ozon.dev/skubach/workshop-1-bot/model/telegram/bot/client"
)

// MockBotClient is a mock of BotClient interface.
type MockBotClient struct {
	ctrl     *gomock.Controller
	recorder *MockBotClientMockRecorder
}

// MockBotClientMockRecorder is the mock recorder for MockBotClient.
type MockBotClientMockRecorder struct {
	mock *MockBotClient
}

// NewMockBotClient creates a new mock instance.
func NewMockBotClient(ctrl *gomock.Controller) *MockBotClient {
	mock := &MockBotClient{ctrl: ctrl}
	mock.recorder = &MockBotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotClient) EXPECT() *MockBotClientMockRecorder {
	return m.recorder
}

// SendCallbackQuery mocks base method.
func (m *MockBotClient) SendCallbackQuery(arg0 []*client.KeyboardRow, arg1 string, arg2 int, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCallbackQuery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCallbackQuery indicates an expected call of SendCallbackQuery.
func (mr *MockBotClientMockRecorder) SendCallbackQuery(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCallbackQuery", reflect.TypeOf((*MockBotClient)(nil).SendCallbackQuery), arg0, arg1, arg2, arg3)
}

// SendInlineKeyboard mocks base method.
func (m *MockBotClient) SendInlineKeyboard(arg0 []*client.KeyboardRow, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInlineKeyboard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInlineKeyboard indicates an expected call of SendInlineKeyboard.
func (mr *MockBotClientMockRecorder) SendInlineKeyboard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInlineKeyboard", reflect.TypeOf((*MockBotClient)(nil).SendInlineKeyboard), arg0, arg1, arg2)
}

// SendMessage mocks base method.
func (m *MockBotClient) SendMessage(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockBotClientMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockBotClient)(nil).SendMessage), arg0, arg1)
}
